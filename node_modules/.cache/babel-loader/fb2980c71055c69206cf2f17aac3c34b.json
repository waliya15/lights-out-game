{"ast":null,"code":"import _slicedToArray from \"E:\\\\Projects\\\\waliya\\\\react-lights-out-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"E:\\\\Projects\\\\waliya\\\\react-lights-out-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Projects\\\\waliya\\\\react-lights-out-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Projects\\\\waliya\\\\react-lights-out-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Projects\\\\waliya\\\\react-lights-out-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Projects\\\\waliya\\\\react-lights-out-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\Projects\\\\waliya\\\\react-lights-out-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\Projects\\\\waliya\\\\react-lights-out-starter\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      board: _this.createBoard(),\n      hasWon: false\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this))); // this.createBoard = this.createBoard.bind(this)\n    // this.litOrNot = this.litOrNot.bind(this)\n    // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      // TODO: create array-of-arrays of true/false values\n      var board = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          var isLit = Math.floor(Math.random() * 2) === 0 ? false : true;\n          row.push(isLit);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      console.log(coord);\n      console.log(x, y);\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          console.log(x, y);\n          console.log(board[x][y]);\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x);\n      flipCell(y, x + 1);\n      flipCell(y, x - 1);\n      flipCell(y + 1, x);\n      flipCell(y - 1, x);\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      }); // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.hasWon) {\n        return /*#__PURE__*/React.createElement(\"h1\", {\n          className: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 14\n          }\n        }, \" YOU WON BABY !\");\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }\n      }, \"Lights\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flux\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }\n      }, \"Out\")), /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }\n      }, this.state.board.map(function (row, i) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: i,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }\n        }, row.map(function (col, j) {\n          return /*#__PURE__*/React.createElement(Cell, {\n            key: \"\".concat(i, \"-\").concat(j),\n            isLit: _this2.state.board[i][j],\n            flipCellsAroundMe: _this2.flipCellsAround,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 22\n            }\n          });\n        }));\n      }))));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: true\n};\nexport default Board;","map":{"version":3,"sources":["E:/Projects/waliya/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","board","createBoard","hasWon","flipCellsAround","bind","i","nrows","row","j","ncols","isLit","Math","floor","random","push","coord","split","map","Number","y","x","console","log","flipCell","every","cell","setState","col","defaultProps","chanceLightStartsOn"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows : 5 ,\n    ncols : 5 ,\n    chanceLightStartsOn : true\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      board : this.createBoard() , \n      hasWon : false\n    }\n    this.flipCellsAround = this.flipCellsAround.bind(this)\n    // this.createBoard = this.createBoard.bind(this)\n    // this.litOrNot = this.litOrNot.bind(this)\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    // TODO: create array-of-arrays of true/false values\n    var board = [];\n    for(let i  = 0 ; i < this.props.nrows ; i++){\n      var row = []\n      for(let j  = 0 ; j < this.props.ncols ; j++){\n        const isLit = Math.floor(Math.random() * 2) === 0 ? false : true\n        row.push(isLit)\n      }\n      board.push(row)\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    console.log(coord)\n    console.log(x , y)\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        console.log(x , y)\n        console.log(board[x][y])\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y , x)\n    flipCell(y , x + 1)\n    flipCell(y , x - 1)\n    flipCell(y + 1 , x)\n    flipCell(y - 1 , x)\n\n    const hasWon = board.every(row => row.every(cell => !cell))\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    this.setState({board : board , hasWon : hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    if(this.state.hasWon){\n      return <h1 className = ''> YOU WON BABY !</h1>\n    }\n    return(\n      <div>\n        <div>\n        <div className = 'neon'>Lights</div>\n        <div className = 'flux'>Out</div>\n        </div>\n        <table className = 'Board'>\n        <tbody>\n        {this.state.board.map((row , i) => {\n          return (\n            <tr key = {i}>\n              { row.map((col , j) => {\n              return <Cell \n                      key = {`${i}-${j}`} \n                      isLit = {this.state.board[i][j]} \n                      flipCellsAroundMe = {this.flipCellsAround}/>\n               })}\n             </tr>\n          )\n        })}\n        </tbody>\n      </table>\n      </div>\n      \n    )\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}